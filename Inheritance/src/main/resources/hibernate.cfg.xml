<?xml version='1.0' encoding='utf-8'?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2010, Red Hat Inc. or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Inc.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>

    <session-factory>

        <!-- Database connection settings
        <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="connection.url">jdbc:oracle:thin:@localhost:1521/XE</property>
        <property name="connection.username">org.mahesh</property>
        <property name="connection.password">org.mahesh</property>-->

        <!--<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/mahesh</property>
        <property name="connection.username">mahesh</property>
        <property name="connection.password">password</property>-->
        <property name="connection.driver_class">org.hsqldb.jdbcDriver</property>
        <property name="connection.url">jdbc:hsqldb:hsql://localhost/xdb</property>
        <property name="connection.username">sa</property>

        <!-- JDBC connection pool (use the built-in) -->
        <property name="connection.pool_size">1</property>

        <!-- SQL dialect -->
        <!--<property name="dialect">org.mahesh.hibernate.dialect.Oracle10gDialect</property>-->
        <!---<property name="dialect">org.hibernate.dialect.MySQLDialect</property>-->
        <property name="dialect">org.hibernate.dialect.HSQLDialect</property>

        <!-- Disable the second-level cache  -->
        <property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

        <!-- Echo all executed SQL to stdout -->
        <property name="show_sql">true</property>

        <!-- Drop and re-create the database schema on startup -->
        <property name="hbm2ddl.auto">create</property>

        <!--
            Creates a separate tables for all three and adding a super column into sub class tables.
            Checke subclass tables have a super class vehicleId
            Vehicle (vehicleName, vehicleId)
            Vehicle (vehicleName, vehicleId)
            Vehicle (vehicleName, vehicleId)
            TwoWheeler (twoWheelerName, vehicleId)
            FourWheeler (fourWheelerName, vehicleId)
        -->
        <mapping class="org.mahesh.dto.joined.Vehicle" />
        <mapping class="org.mahesh.dto.joined.TwoWheeler"/>
        <mapping class="org.mahesh.dto.joined.FourWheeler" />

        <!--
            Creates single table with dType. In this case most of the column values will be null.
            Vehicle (vehicleName, VEHICLE_TYPE
            Vehicle (vehicleName, twoWheelerName, VEHICLE_TYPE)
            Vehicle (vehicleName, fourWheelerName, VEHICLE_TYPE)
        -->
        <!--<mapping class="org.mahesh.dto.singleTable.Vehicle" />
        <mapping class="org.mahesh.dto.singleTable.TwoWheeler"/>
        <mapping class="org.mahesh.dto.singleTable.FourWheeler"/>-->

        <!--
            Creates three tables (Vehicle, TwoVehicle, FourVehicle)
            Creates a VehicleId in the same tables. No relations ship will be stored in the Vehicle table
            It allows you to delete any table/row in this (try deleting the table)
                Vehicle (vehicleName, vehicleId)
                TwoWheeler (vehicleName, twoWheelerName, vehicleId)
                FourWheeler (vehicleName, fourWheelerName, vehicleId)
        -->
        <!--<mapping class="org.mahesh.dto.tablePerClass.Vehicle" />
        <mapping class="org.mahesh.dto.tablePerClass.TwoWheeler"/>
        <mapping class="org.mahesh.dto.tablePerClass.FourWheeler" />-->

    </session-factory>

</hibernate-configuration>





